
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"sticky":""}},[_c('navbar',{attrs:{"type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/tp/index.html","title":"Home"}},[_v("Listify")])]},proxy:true},{key:"right",fn:function(){return [_c('li',[_c('form',{staticClass:"navbar-form"},[_c('searchbar',{attrs:{"data":searchData,"placeholder":"Search","on-hit":searchCallback,"menu-align-right":""}})],1)])]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/tp/index.html"}},[_v("Home")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/tp/UserGuide.html"}},[_v("User Guide")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/tp/DeveloperGuide.html"}},[_v("Developer Guide")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/tp/AboutUs.html"}},[_v("About Us")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/AY2425S2-CS2103-F09-3/tp","target":"_blank"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])])],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('overlay-source',{attrs:{"id":"site-nav","tag-name":"nav","to":"site-nav"}},[_c('div',{staticClass:"site-nav-top"},[_c('div',{staticClass:"fw-bold mb-2",staticStyle:{"font-size":"1.25rem"}},[_v("Site Map")])]),_v(" "),_c('div',{staticClass:"nav-component slim-scroll"},[_c('site-nav',[_c('overlay-source',{staticClass:"site-nav-list site-nav-list-root",attrs:{"tag-name":"ul","to":"mb-site-nav"}},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/index.html"}},[_v("Home")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/UserGuide.html"}},[_v("User Guide")]),_v(" "),_c('div',{staticClass:"site-nav-dropdown-btn-container"},[_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/UserGuide.html#quick-start"}},[_v("Quick Start")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/UserGuide.html#features"}},[_v("Features")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/UserGuide.html#faq"}},[_v("FAQ")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/UserGuide.html#faq"}},[_v("Command Summary")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html"}},[_v("Developer Guide")]),_v(" "),_c('div',{staticClass:"site-nav-dropdown-btn-container"},[_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html#acknowledgements"}},[_v("Acknowledgements")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html#setting-up-getting-started"}},[_v("Setting Up")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html#design"}},[_v("Design")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html#implementation"}},[_v("Implementation")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html#documentation-logging-testing-configuration-dev-ops"}},[_v("Documentation, logging, testing, configuration, dev-ops")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html#appendix-requirements"}},[_v("Appendix: Requirements")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/DeveloperGuide.html#appendix-instructions-for-manual-testing"}},[_v("Appendix: Instructions for manual testing")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/tp/AboutUs.html"}},[_v("About Us")])])])])],1)],1)]),_v(" "),_c('div',{attrs:{"id":"content-wrapper"},scopedSlots:_u([{key:"###",fn:function(){return undefined},proxy:true}])},[_m(0),_v(" "),_c('div',{pre:true,attrs:{"class":"page-nav-print d-none d-print-block"}}),_v(" "),_c('hr'),_v(" "),_m(1),_v(" "),_m(2),_v(" "),_c('hr'),_v(" "),_m(3),_v(" "),_m(4),_v(" "),_c('hr'),_v(" "),_m(5),_v(" "),_m(6),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/ArchitectureDiagram.png","width":"280"}}),_v(" "),_m(7),_v(" "),_c('p',[_v("Given below is a quick overview of main components and how they interact with each other.")]),_v(" "),_m(8),_v(" "),_m(9),_v(" "),_m(10),_v(" "),_c('p',[_v("The bulk of the app's work is done by the following four components:")]),_v(" "),_m(11),_v(" "),_m(12),_v(" "),_m(13),_v(" "),_m(14),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/ArchitectureSequenceDiagram.png","width":"574"}}),_v(" "),_c('p',[_v("Each of the four main components (also shown in the diagram above),")]),_v(" "),_m(15),_v(" "),_m(16),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/ComponentManagers.png","width":"300"}}),_v(" "),_c('p',[_v("The sections below give more details of each component.")]),_v(" "),_m(17),_v(" "),_m(18),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/UiClassDiagram.png","alt":"Structure of the UI Component"}}),_v(" "),_m(19),_v(" "),_m(20),_v(" "),_m(21),_v(" "),_m(22),_v(" "),_m(23),_v(" "),_m(24),_v(" "),_m(25),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/LogicClassDiagram.png","width":"550"}}),_v(" "),_m(26),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/DeleteSequenceDiagram.png","alt":"Interactions Inside the Logic Component for the `delete 1` Command"}}),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_c('strong',[_v("Note:")]),_v(" The lifeline for "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("DeleteCommandParser")]),_v(" should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline continues till the end of diagram.")])]),_v(" "),_m(27),_v(" "),_m(28),_v(" "),_m(29),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/ParserClasses.png","width":"600"}}),_v(" "),_c('p',[_v("How the parsing works:")]),_v(" "),_m(30),_v(" "),_m(31),_v(" "),_m(32),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/ModelClassDiagram.png","width":"450"}}),_v(" "),_m(33),_v(" "),_m(34),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_c('strong',[_v("Note:")]),_v(" An alternative (arguably, a more OOP) model is given below. It has a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tag")]),_v(" list in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddressBook")]),_v(", which "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" references. This allows "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddressBook")]),_v(" to only require one "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tag")]),_v(" object per unique tag, instead of each "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" needing their own "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tag")]),_v(" objects."),_c('br')]),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/BetterModelClassDiagram.png","width":"450"}})],1),_v(" "),_m(35),_v(" "),_m(36),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/StorageClassDiagram.png","width":"550"}}),_v(" "),_m(37),_v(" "),_m(38),_v(" "),_m(39),_v(" "),_m(40),_v(" "),_c('hr'),_v(" "),_m(41),_v(" "),_c('p',[_v("This section describes some noteworthy details on how certain features are implemented.")]),_v(" "),_m(42),_v(" "),_m(43),_v(" "),_m(44),_v(" "),_m(45),_v(" "),_c('p',[_v("How the sorting command works:")]),_v(" "),_m(46),_v(" "),_m(47),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/SortCommandParser.png","width":"550"}}),_v(" "),_m(48),_v(" "),_m(49),_v(" "),_m(50),_v(" "),_m(51),_v(" "),_m(52),_v(" "),_c('p',[_v("How the contact command works:")]),_v(" "),_m(53),_v(" "),_m(54),_v(" "),_c('pic',{attrs:{"src":"/tp/diagrams/ContactCommand.png","width":"550"}}),_v(" "),_m(55),_v(" "),_m(56),_v(" "),_m(57),_v(" "),_m(58),_v(" "),_m(59),_v(" "),_m(60),_v(" "),_c('p',[_v("The import functionality is implemented through several classes:")]),_v(" "),_m(61),_v(" "),_m(62),_v(" "),_m(63),_v(" "),_v("\n\nStep 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/UndoRedoState1.png","alt":"UndoRedoState1"}}),_v("\n\nStep 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/UndoRedoState2.png","alt":"UndoRedoState2"}}),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_v("\n\n**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.\n\n")]),_v("\n\nStep 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/UndoRedoState3.png","alt":"UndoRedoState3"}}),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_v("\n\n**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather\nthan attempting to perform the undo.\n\n")]),_v("\n\nThe following sequence diagram shows how an undo operation goes through the `Logic` component:\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/UndoSequenceDiagram-Logic.png","alt":"UndoSequenceDiagram-Logic"}}),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_v("\n\n**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.\n\n")]),_v("\n\nSimilarly, how an undo operation goes through the `Model` component is shown below:\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/UndoSequenceDiagram-Model.png","alt":"UndoSequenceDiagram-Model"}}),_v("\n\nThe `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.\n\n"),_c('box',{attrs:{"type":"info","seamless":""}},[_v("\n\n**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.\n\n")]),_v("\n\nStep 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/UndoRedoState4.png","alt":"UndoRedoState4"}}),_v("\n\nStep 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/UndoRedoState5.png","alt":"UndoRedoState5"}}),_v("\n\nThe following activity diagram summarizes what happens when a user executes a new command:\n\n"),_c('pic',{attrs:{"src":"/tp/diagrams/CommitActivityDiagram.png","width":"250"}}),_v("\n\n#### Design considerations:\n\n**Aspect: How undo & redo executes:**\n\n* **Alternative 1 (current choice):** Saves the entire address book.\n  * Pros: Easy to implement.\n  * Cons: May have performance issues in terms of memory usage.\n\n* **Alternative 2:** Individual command knows how to undo/redo by\n  itself.\n  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).\n  * Cons: We must ensure that the implementation of each individual command are correct.\n\n\n--------------------------------------------------------------------------------------------------------------------\n\n## **Documentation, logging, testing, configuration, dev-ops**\n\n* [Documentation guide](Documentation.md)\n* [Testing guide](Testing.md)\n* [Logging guide](Logging.md)\n* [Configuration guide](Configuration.md)\n* [DevOps guide](DevOps.md)\n\n--------------------------------------------------------------------------------------------------------------------\n\n## **Appendix: Requirements**\n\n### Product scope\n\n**Target user profile**:\n\n* has a need to manage a significant number of contacts\n* prefer desktop apps over other types\n* can type fast\n* prefers typing to mouse interactions\n* is reasonably comfortable using CLI apps\n* wants to upload and manage multiple contacts at once\n\n**Value proposition**: manage contacts faster than a typical mouse/GUI driven app\n\n\n### User stories\n\nPriorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`\n\n| Priority | As a …​                                    | I want to …​                                                                               | So that I can…​                                                        |\n|--------|--------------------------------------------|--------------------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| `* * *` | new user                                   | see usage instructions                                                                     | refer to instructions when I forget how to use the App                 |\n| `* * *` | user                                       | add a new person                                                                           | so that I can save basic contact details                                                                       |\n| `* * *` | user                                       | view all contacts                                                                          | so that I can see all the contacts in my address book                                                                       |\n| `* * *` | user                                       | delete a person                                                                            | remove entries that I no longer need                                   |\n| `* * *` | user                                       | find a person by name                                                                      | locate details of persons without having to go through the entire list |\n| `* * *` | user                                       | find a person by number                                                                    | locate details of persons without having to go through the entire list |\n| `* * *` | user\t                                    | export contacts to a vCard (vcf) or Csv file                                               | easily share or import them into other applications                    |\n| `* * *` | user                                       | identify duplicate contacts                                                                | maintain a clean address book                                          |\n| `* * *` | user                                       | delete multiple contacts at once through tags                                              | maintain a clean address book easier                   |\n| `* * *` | user                                       | add notes to certain contacts                                                              | get details of a contact                                               |\n| `* * *` | event organiser                            | import contacts from a CSV file and VCF file                                               | add multiple contacts quickly                                       |\n| `* *`  | event organiser                            | quickly type out contacts from handwritten contact details                                 | quickly add them to group chats          |\n| `* *`  | user with many persons in the address book | sort contacts alphabetically                                                               | organise details of persons easily                                     |\n| `* *`  | user                                       | restore accidentally deleted contacts                                                      | don't lose important information                              |\n| `* *`  | user                                       | have the option to add contacts step-by-step for each contact detail                       | don't need to use unfamiliar flags |\n| `*`    | user with wrong details of a person        | edit the persons information                                                               | modify a persons information                                           |\n| `*`    | user contacting the same person frequently | mark a person as favourite                                                                 | quickly access the persons information                                 |\n| `*`    | user                                       | set certain contacts as VIPs                                                               | find important contacts faster                                         |\n| `*`    | user                                       | be warned before deleting a contact                                                        | don't accidentally remove important information                 |\n| `*`    | user                                       | add multiple phone numbers or emails for a contact                                         | have alternate ways to contact that person        |\n| `*`    | event organiser                            | tag contacts into groups                                                                   | categorize them                                                        |\n| `*`    | event organiser                            | add multiple contacts in one command                                                       | save time when entering bulk data                              |\n| `*`    | event organiser                            | bulk edit multiple contacts                                                                | update common details efficiently                                      |\n| `*`    | user                                       | share selected contacts via email                                                          | send them to my colleagues                                        |\n| `*`    | user                                       | enable dark mode                                                                           | use the application comfortably in low-light environments              |\n| `*`    | event organiser                            | set reminders for follow-ups                                                               | stay on top of communication tasks                                     |\n| `*`    | user                                       | search for a contact using partial matches                                                 | find people even if I don't remember their full details   |\n| `*`    | user                                       | interact with the application fully through keyboard                                       | do tasks quickly                               |\n| `*`    | user                                       | undo my last action                                                                        | recover from mistakes/typos                                            |\n| `*`    | user                                       | view recently added contacts                                                               | verify my latest entries                                               |\n| `*`    | event organiser                            | see autocomplete suggestions and use them                                                  | do tasks quicker                                          |\n| `*`    | user                                       | view contact history (last modified, date added etc)                                       | track updates                                 |\n| `*`    | user                                       | use natural language commands                                                              | don't have to memorize syntax                                        |\n| `*`    | event organiser                            | email a group of contacts directly from the app                                            | send bulk communications                           |\n| `*`    | event organiser                            | filter contacts by details quickly and get an updated list of matching contacts on the fly | find contacts easier |\n| `*`    | event organiser                            | edit a contact's details                                                                   | update outdated information                                            |\n\n\n### Use cases\n\n(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)\n\n**Use case: Delete a person**\n\n**MSS**\n\n1.  User requests to list persons.\n2.  AddressBook shows a list of persons.\n3.  User requests to delete a specific person in the list.\n4.  AddressBook deletes the person.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. The list is empty.\n\n  Use case ends.\n\n* 3a. The given index is invalid.\n\n    * 3a1. AddressBook shows an error message.\n\n      Use case resumes at step 2.\n\n---\n\n**Use case: View all contacts**\n\n**MSS**\n\n1.  User requests to list persons.\n2.  AddressBook shows a list of persons.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. The list is empty.\n\n  Use case ends.\n---\n\n**Use case: Find a person by name**\n\n**MSS**\n\n1.  User requests to find a person by name.\n2.  AddressBook shows the specific person user requested.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. The persons name is not added to AddressBook.\n\n    * 2a1. AddressBook shows an error message.\n\n      Use case ends.\n\n---\n**Use case: Find a person by number**\n\n**MSS**\n\n1.  User requests to find a person by number.\n2.  AddressBook shows the specific person user requested.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. The persons number is not added to AddressBook.\n\n    * 2a1. AddressBook shows an error message.\n\n      Use case ends.\n\n---\n**Use case: Sort contacts alphabetically**\n\n**MSS**\n\n1.  User requests to list persons.\n2.  AddressBook shows a list of persons.\n3.  User requests to sort contacts based on persons name.\n4.  AddressBook shows sorted list of persons.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. The list is empty.\n\n  Use case ends.\n\n---\n**Use case: Import contacts from CSV**\n\n**MSS**\n\n1.  User requests to import contacts from a CSV file.\n2.  System validates the file path and format.\n3.  System reads the CSV file and parses the contact data.\n4.  System adds valid contacts to the address book.\n5.  System displays a success message with the number of contacts imported.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. File path is invalid or file does not exist.\n\n    * 2a1. System displays an error message.\n\n      Use case ends.\n\n* 2b. File format is not CSV.\n\n    * 2b1. System displays an error message.\n\n      Use case ends.\n\n* 3a. CSV file has an invalid header.\n\n    * 3a1. System displays an error message.\n\n      Use case ends.\n\n* 3b. CSV file is empty.\n\n    * 3b1. System displays a message indicating no contacts were imported.\n\n      Use case ends.\n\n* 4a. Some contacts have invalid data.\n\n    * 4a1. System skips invalid contacts.\n    * 4a2. System continues importing valid contacts.\n    * 4a3. System reports the rows with errors in the result message.\n\n      Use case resumes from step 5.\n\n* 4b. Some contacts are duplicates of existing contacts.\n\n    * 4b1. System skips duplicate contacts.\n    * 4b2. System continues importing non-duplicate contacts.\n    * 4b3. System reports the duplicate entries in the result message.\n\n      Use case resumes from step 5.\n---\n**Use case: Import contacts from VCF**\n\n**MSS**\n\n1.  User requests to import contacts from a VCF file.\n2.  System validates the file path and format.\n3.  System reads the VCF file and parses the contact data.\n4.  System adds valid contacts to the address book.\n5.  System displays a success message with the number of contacts imported.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. File path is invalid or file does not exist.\n\n    * 2a1. System displays an error message.\n\n      Use case ends.\n\n* 2b. File format is not VCF.\n\n    * 2b1. System displays an error message.\n\n      Use case ends.\n\n* 4a. Some contacts have invalid data.\n\n    * 4a1. System skips invalid contacts.\n    * 4a2. System continues importing valid contacts.\n    * 4a3. System reports the contacts with errors in the result message.\n\n      Use case resumes from step 5.\n\n* 4b. Some contacts are duplicates of existing contacts.\n\n    * 4b1. System skips duplicate contacts.\n    * 4b2. System continues importing non-duplicate contacts.\n    * 4b3. System reports the duplicate entries in the result message.\n\n      Use case resumes from step 5.\n\n---\n**Use case: Edit persons information**\n\n**MSS**\n\n1.  User requests to list persons.\n2.  AddressBook shows a list of persons.\n3.  User requests to edit a specific person in the list.\n4.  AddressBook updates the person information.\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. The list is empty.\n\n  Use case ends.\n\n* 3a. The updated information is not valid.\n\n    * 3a1. AddressBook shows an error message.\n\n      Use case resumes at step 2.\n      *{More to be added}*\n\n\n**Use case: Mark a contact as contacted**\n\n**MSS**\n\n1.  User requests to list persons\n2.  AddressBook shows a list of persons\n3.  User requests to mark a specific person in the list as contacted\n4.  AddressBook updates the person's last contacted time\n\n    Use case ends.\n\n**Extensions**\n\n* 2a. The list is empty.\n\n  Use case ends.\n\n* 3a. The given index is invalid.\n\n    * 3a1. AddressBook shows an error message.\n\n      Use case resumes at step 2.\n\n\n---\n\n### Non-Functional Requirements\n\n1.  Should work on any _mainstream OS_ as long as it has Java `17` or above installed.\n2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.\n3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.\n4.  Should be portable in the form of a FAT Jar file.\n5.  Programme size (excluding user data) should not exceed 5MB.\n6.  The programme should not use more than 1GB of memory with no contacts added.\n7.  The programme should be persistent.\n\n\n### Glossary\n\n* **Mainstream OS**: Windows, Linux, Unix, MacOS\n* **Contact** - An individual an organisation/party has interest in communicating with.\n* **Contact Details** - Adjectives that can describe a contact including but not limited to Contact Name, Phone Number, and Email\n* **CSV File** - a simple text file that stores data in a tabular format, where each line represents a row and values within a row are separated by commas\n* **Event Organisers** – Tech-savvy event organisers who are fast typists and deal with large amounts of contacts.\n* **Tag** - To associate a Contact with a particular group\n\n--------------------------------------------------------------------------------------------------------------------\n\n## **Appendix: Instructions for manual testing**\n\nGiven below are instructions to test the app manually.\n\n"),_c('box',{attrs:{"type":"info","seamless":""}},[_v("\n\n**Note:** These instructions only provide a starting point for testers to work on;\ntesters are expected to do more *exploratory* testing.\n\n")]),_v("\n\n### Launch and shutdown\n\n1. Initial launch\n\n   1. Download the jar file and copy into an empty folder\n\n   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.\n\n1. Saving window preferences\n\n   1. Resize the window to an optimum size. Move the window to a different location. Close the window.\n\n   1. Re-launch the app by double-clicking the jar file."),_c('br'),_v("\n       Expected: The most recent window size and location is retained.\n\n\n### Deleting a person\n\n1. Deleting a person while all persons are being shown\n\n   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.\n\n   1. Test case: `delete 1`"),_c('br'),_v("\n      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.\n\n   1. Test case: `delete 0`"),_c('br'),_v("\n      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.\n\n   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)"),_c('br'),_v("\n      Expected: Similar to previous.\n\n\n\n### Saving data\n\n1. Export/Import Data\n\n   1. Test case: Export data to a different format (CSV/VCF), delete all contacts, then import.\n\n      Expected: All contacts should be restored after import.\n\n2. Auto save on exit\n\n    1. Test case: Modify data, then exit application.\n\n       Expected: Changes are automatically saved without explicit save command.\n\n### Importing data\n**Prerequisites**\n* Ensure the application is running and the imports directory is accessible.\n* Prepare test CSV and VCF files with various scenarios (valid entries, invalid entries, duplicates).\n\n**Test Cases**\n1. Basic Import Functionality\n\n    1. Execute: `import validfile.csv`\n\n        Expected: Success message with the number of contacts imported.\n\n2. File Format Handling\n\n    1. Execute: `import validfile.vcf`\n\n       Expected: Success message with the number of contacts imported.\n\n    1. Execute: import `invalidfile.txt`\n\n       Expected: Error message about unsupported file type.\n\n3. Empty File Handling\n\n    1. Import an empty CSV/VCF file.\n\n       Expected: Error message stating no contacts in file.\n\n4. Duplicate Handling\n\n    1. Import a file with duplicate entries only.\n\n       Expected: Error message with duplicates reported.\n\n5. Invalid Data Handling\n\n    1. Import a CSV/VCF file with invalid data (e.g., malformed email, invalid phone number).\n\n       Expected: Error message listing invalid entries, valid entries still imported.\n\n6. Large File Handling\n\n    1. Import a CSV/VCF file with a large number of valid entries (e.g., 1000+).\n\n       Expected: Success message, all valid entries imported.\n\n7. Partial Import\n\n    1. Import a file with some valid and some invalid entries.\n\n       Expected: Success message for valid entries, error messages for invalid ones.\n\n8. Error Reporting\n\n    1. For each error case, verify that error messages are clear and informative.\n\n9. Post-Import Verification\n\n    1. After successful imports, use other commands (e.g., list, find) to verify imported data.\n\n  ")],1),_v(" "),_c('overlay-source',{attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"},[_c('overlay-source',{staticClass:"nav nav-pills flex-column my-0 small no-flex-wrap",attrs:{"id":"mb-page-nav","tag-name":"nav","to":"mb-page-nav"}},[_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#listify-developer-guide"}},[_v("Listify Developer Guide‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#acknowledgements"}},[_v("Acknowledgements‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#setting-up-getting-started"}},[_v("Setting up, getting started‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#design"}},[_v("Design‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#architecture"}},[_v("Architecture‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#ui-component"}},[_v("UI component‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#logic-component"}},[_v("Logic component‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#model-component"}},[_v("Model component‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#storage-component"}},[_v("Storage component‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#common-classes"}},[_v("Common classes‎")])]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#implementation"}},[_v("Implementation‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#sort-command"}},[_v("Sort command‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#contact-command"}},[_v("Contact command‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#import-feature"}},[_v("Import feature‎")])])])])],1)]),_v(" "),_c('scroll-top-button')],1),_v(" "),_m(64)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"listify-developer-guide"}},[_v("Listify Developer Guide"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#listify-developer-guide","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"acknowledgements"}},[_c('strong',[_v("Acknowledgements")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#acknowledgements","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("Libraries used: "),_c('a',{attrs:{"href":"https://openjfx.io/"}},[_v("JavaFX")]),_v(", "),_c('a',{attrs:{"href":"https://github.com/FasterXML/jackson"}},[_v("Jackson")]),_v(", "),_c('a',{attrs:{"href":"https://github.com/junit-team/junit5"}},[_v("JUnit5")]),_v(", "),_c('a',{attrs:{"href":"https://github.com/mangstadt/ez-vcard"}},[_v("ez-vcard")])]),_v(" "),_c('li',[_v("This project is based on the AddressBook-Level3 project created by the "),_c('a',{attrs:{"href":"https://se-education.org"}},[_v("SE-EDU initiative")]),_v(".")])])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"setting-up-getting-started"}},[_c('strong',[_v("Setting up, getting started")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#setting-up-getting-started","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Refer to the guide "),_c('a',{attrs:{"href":"/tp/SettingUp.html"}},[_c('em',[_v("Setting up and getting started")])]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"design"}},[_c('strong',[_v("Design")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#design","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"architecture"}},[_v("Architecture"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#architecture","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('em',[_c('strong',[_v("Architecture Diagram")])]),_v(" given above explains the high-level design of the App.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Main components of the architecture")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Main")])]),_v(" (consisting of classes "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Main")])]),_v(" and "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("MainApp")])]),_v(") is in charge of the app launch and shut down.")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("At app launch, it initializes the other components in the correct sequence, and connects them up with each other.")]),_v(" "),_c('li',[_v("At shut down, it shuts down the other components and invokes cleanup methods where necessary.")])])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"#ui-component"}},[_c('strong',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UI")])])]),_v(": The UI of the App.")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#logic-component"}},[_c('strong',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")])])]),_v(": The command executor.")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#model-component"}},[_c('strong',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")])])]),_v(": Holds the data of the App in memory.")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#storage-component"}},[_c('strong',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Storage")])])]),_v(": Reads data from, and writes data to, the hard disk.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('a',{attrs:{"href":"#common-classes"}},[_c('strong',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Commons")])])]),_v(" represents a collection of classes used by multiple other components.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("How the architecture components interact with each other")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('em',[_v("Sequence Diagram")]),_v(" below shows how the components interact with each other for the scenario where the user issues the command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("delete 1")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("defines its "),_c('em',[_v("API")]),_v(" in an "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("interface")]),_v(" with the same name as the Component.")]),_v(" "),_c('li',[_v("implements its functionality using a concrete "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("{Component Name}Manager")]),_v(" class (which follows the corresponding API "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("interface")]),_v(" mentioned in the previous point.")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("For example, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" component defines its API in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic.java")]),_v(" interface and implements its functionality using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("LogicManager.java")]),_v(" class which follows the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component's being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"ui-component"}},[_v("UI component"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#ui-component","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('strong',[_v("API")]),_v(" of this component is specified in "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Ui.java")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The UI consists of a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("MainWindow")]),_v(" that is made up of parts e.g."),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("CommandBox")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ResultDisplay")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("PersonListPanel")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("StatusBarFooter")]),_v(" etc. All these, including the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("MainWindow")]),_v(", inherit from the abstract "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UiPart")]),_v(" class which captures the commonalities between classes that represent parts of the visible GUI.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UI")]),_v(" component uses the JavaFx UI framework. The layout of these UI parts are defined in matching "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".fxml")]),_v(" files that are in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("src/main/resources/view")]),_v(" folder. For example, the layout of the "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("MainWindow")])]),_v(" is specified in "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("MainWindow.fxml")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UI")]),_v(" component,")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("executes user commands using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" component.")]),_v(" "),_c('li',[_v("listens for changes to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(" data so that the UI can be updated with the modified data.")]),_v(" "),_c('li',[_v("keeps a reference to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" component, because the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UI")]),_v(" relies on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" to execute commands.")]),_v(" "),_c('li',[_v("depends on some classes in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(" component, as it displays "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" object residing in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(".")])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"logic-component"}},[_v("Logic component"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#logic-component","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("API")]),_v(" : "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic.java")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here's a (partial) class diagram of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" component:")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The sequence diagram below illustrates the interactions within the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" component, taking "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("execute(\"delete 1\")")]),_v(" API call as an example.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("How the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" component works:")])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("When "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" is called upon to execute a command, it is passed to an "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddressBookParser")]),_v(" object which in turn creates a parser that matches the command (e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("DeleteCommandParser")]),_v(") and uses it to parse the command.")]),_v(" "),_c('li',[_v("This results in a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Command")]),_v(" object (more precisely, an object of one of its subclasses e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("DeleteCommand")]),_v(") which is executed by the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("LogicManager")]),_v(".")]),_v(" "),_c('li',[_v("The command can communicate with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(" when it is executed (e.g. to delete a person)."),_c('br'),_v("\nNote that although this is shown as a single step in the diagram above (for simplicity), in the code it can take several interactions (between the command object and the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(") to achieve.")]),_v(" "),_c('li',[_v("The result of the command execution is encapsulated as a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("CommandResult")]),_v(" object which is returned back from "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(".")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here are the other classes in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Logic")]),_v(" (omitted from the class diagram above) that are used for parsing a user command:")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("When called upon to parse a user command, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddressBookParser")]),_v(" class creates an "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("XYZCommandParser")]),_v(" ("),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("XYZ")]),_v(" is a placeholder for the specific command name e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddCommandParser")]),_v(") which uses the other classes shown above to parse the user command and create a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("XYZCommand")]),_v(" object (e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddCommand")]),_v(") which the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddressBookParser")]),_v(" returns back as a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Command")]),_v(" object.")]),_v(" "),_c('li',[_v("All "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("XYZCommandParser")]),_v(" classes (e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddCommandParser")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("DeleteCommandParser")]),_v(", ...) inherit from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Parser")]),_v(" interface so that they can be treated similarly where possible e.g, during testing.")])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"model-component"}},[_v("Model component"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#model-component","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("API")]),_v(" : "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model.java")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(" component,")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("stores the address book data i.e., all "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" objects (which are contained in a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UniquePersonList")]),_v(" object).")]),_v(" "),_c('li',[_v("stores the currently 'selected' "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" objects (e.g., results of a search query) as a separate "),_c('em',[_v("filtered")]),_v(" list which is exposed to outsiders as an unmodifiable "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ObservableList<Person>")]),_v(" that can be 'observed' e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.")]),_v(" "),_c('li',[_v("stores a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UserPref")]),_v(" object that represents the user’s preferences. This is exposed to the outside as a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ReadOnlyUserPref")]),_v(" objects.")]),_v(" "),_c('li',[_v("does not depend on any of the other three components (as the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(" represents data entities of the domain, they should make sense on their own without depending on other components)")])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"storage-component"}},[_v("Storage component"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#storage-component","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("API")]),_v(" : "),_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Storage.java")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Storage")]),_v(" component,")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("can save both address book data and user preference data in JSON format, and read them back into corresponding objects.")]),_v(" "),_c('li',[_v("inherits from both "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("AddressBookStorage")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("UserPrefStorage")]),_v(", which means it can be treated as either one (if only the functionality of only one is needed).")]),_v(" "),_c('li',[_v("depends on some classes in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(" component (because the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Storage")]),_v(" component's job is to save/retrieve objects that belong to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(")")])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"common-classes"}},[_v("Common classes"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#common-classes","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Classes used by multiple components are in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("seedu.address.commons")]),_v(" package.")])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"implementation"}},[_c('strong',[_v("Implementation")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#implementation","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"sort-command"}},[_v("Sort command"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#sort-command","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("sort")]),_v(" command follows the standard flow of other commands in the "),_c('strong',[_v("Logic component")]),_v(", ensuring seamless integration with the system. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SortCommand")]),_v(" class is responsible for sorting the list of contacts based on ascending or descending order. The parsing logic is handled by "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SortCommandParser")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("Sorting is performed using Java’s "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Comparator")]),_v(" interface. When executed, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SortCommand")]),_v(" updates the displayed list by applying the selected sorting criteria on name or phone (if duplicate name). The sorting options include:")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('strong',[_v("Name")]),_v(" (alphabetical order)")]),_v(" "),_c('li',[_c('strong',[_v("Phone")]),_v(" (numerical order)")])])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("The user inputs a valid sort command (e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("sort asc")]),_v(").")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SortCommandParser")]),_v(" parses the input and extracts the sorting criterion.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SortCommand")]),_v(" is created with the appropriate comparator.")]),_v(" "),_c('li',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v("'s filtered contact list is updated with the sorted order.")]),_v(" "),_c('li',[_v("The updated list is displayed in the UI.")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("A sequence diagram illustrating the parsing of the command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("sort asc")]),_v(" is provided below:")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("NOTE")]),_v(": As with other sequence diagrams, the destruction of temporary objects may not be fully represented due to PlantUML limitations.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("By implementing "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SortCommand")]),_v(", the system ensures an organized and structured way for users to manage their contacts efficiently.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"contact-command"}},[_v("Contact command"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#contact-command","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("contact")]),_v(" command follows the standard flow of other commands in the "),_c('strong',[_v("Logic component")]),_v(", ensuring seamless integration with the system. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ContactCommand")]),_v(" class is responsible for marking a person as contacted based on the current time when the command is executed and updating their last contacted time in the system. This command interacts primarily with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(" component to retrieve and update the person’s record. The parsing logic is handled by "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ContactCommandParser")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Contact Command")]),_v(" operates by taking a zero-based "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Index")]),_v(" as input and marking the corresponding person in the filtered person list as contacted. The updated person is then saved back into the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Model")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("execute(Model model)")]),_v(" method first retrieves the filtered list of persons.")]),_v(" "),_c('li',[_v("If the given index is invalid (out of bounds), an error is thrown.")]),_v(" "),_c('li',[_v("Otherwise, the corresponding "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" object is retrieved and updated using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("markAsContacted()")]),_v(" method.")]),_v(" "),_c('li',[_v("The updated "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" is set back in the model, and the list is refreshed.")]),_v(" "),_c('li',[_v("A success message is returned with the index of the marked person.")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("A sequence diagram illustrating the execution flow of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ContactCommand")]),_v(" when a user enters "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("contact 2")]),_v(":")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("NOTE")]),_v(": As with other sequence diagrams, the destruction of temporary objects may not be fully represented due to PlantUML limitations.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"import-feature"}},[_v("Import feature"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#import-feature","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("import")]),_v(" command allows users to import contact data from CSV and VCF files into the address book.")])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"implementation-2"}},[_v("Implementation"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#implementation-2","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The import feature is implemented through the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ImportCommand")]),_v(" class, which supports both CSV and VCF file formats. The command works by parsing the specified file and adding valid contacts to the address book, while handling duplicates and reporting errors.")])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"class-structure"}},[_v("Class structure"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#class-structure","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ImportCommandParser")]),_v(": Parses user input and creates an ImportCommand object.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ImportCommand")]),_v(": Executes the import operation.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("CsvParser")]),_v(": Handles parsing of CSV files.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("VcfParser")]),_v(": Handles parsing of VCF files using the ez-vcard library.")])])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"sequence-flow"}},[_v("Sequence flow"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#sequence-flow","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The sequence diagram below illustrates how the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("import")]),_v(" command works:")])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('small',[_v("["),_c('span',[_c('strong',[_v("Powered by")])]),_v(" "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"30"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 5.6.0")]),_v(", generated on Thu, 3 Apr 2025, 20:10:07 GMT+8]")])])])}
}];
  